[manifest]
version = "1.0.0"
priority = -10

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "inc_career_stat('c_cards_discarded', highlighted_count)"
position = "after"
payload = '''
local eman_discarded_cards = {}
local eman_kept_cards = {}
for _, v in ipairs(G.hand.highlighted) do
    table.insert(eman_discarded_cards, v)
end

for _, card in ipairs(G.hand.cards) do

    local eman_bl = true
    for _, check in ipairs(G.hand.highlighted) do
        if check == card then
            eman_bl = nil
            break
        end
    end

    if eman_bl then
        table.insert(eman_kept_cards, card)
    end
end

if G.GAME.blind then
    G.GAME.blind:eman_before_discard(hook, eman_discarded_cards, eman_kept_cards)
end
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "check_for_unlock({type = 'discard_custom', cards = cards})"
position = "before"
payload = '''
if G.GAME.blind then
    G.GAME.blind:eman_after_discard(hook, eman_discarded_cards, eman_kept_cards)
end
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''local hand_space = e or math.min(#G.deck.cards, G.hand.config.card_limit - #G.hand.cards)'''
position = "after"
payload = '''

if G.GAME.blind and hand_space > 0 then
    hand_space = G.GAME.blind:eman_modify_draw(hand_space)
end
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
for i=1, hand_space do --draw cards from deckL
    if G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.SPECTRAL_PACK then 
        draw_card(G.deck,G.hand, i*100/hand_space,'up', true)
    else
        draw_card(G.deck,G.hand, i*100/hand_space,'up', true)
    end
end
'''
position = "after"
payload = '''

if G.GAME.blind and hand_space > 0 then
    G.GAME.blind:eman_after_draw(hand_space)
end
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "for i=1, #G.hand.highlighted do"
position = "before"
payload = '''

local eman_played_hand = {}

for _, v in ipairs(G.hand.highlighted) do
    table.insert(eman_played_hand, v)
end

if G.GAME.blind then
    G.GAME.blind:eman_before_play(eman_played_hand)
end
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if scoring_hand[i].ability.name == 'Glass Card' and not scoring_hand[i].debuff and pseudorandom('glass') < G.GAME.probabilities.normal/scoring_hand[i].ability.extra then"
position = "before"
payload = '''

if G.GAME.blind and G.GAME.blind:eman_should_destroy(scoring_hand[i], hand_chips, mult) then
    destroyed = true
end
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "func = (function()  update_hand_text({delay = 0, immediate = true}, {mult = 0, chips = 0, chip_total = math.floor(hand_chips*mult), level = '', handname = ''});play_sound('button', 0.9, 0.6);return true end)"
position = "at"
payload = '''
func = (function()  update_hand_text({delay = 0, immediate = true}, {mult = 0, chips = 0, chip_total = (G.GAME.blind:eman_modify_chips(hand_chips, mult) or math.floor(hand_chips*mult)), level = '', handname = ''});play_sound('button', 0.9, 0.6);return true end)
'''
match_indent = false
times = 1



[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "ease_to = G.GAME.chips + math.floor(hand_chips*mult),"
position = "at"
payload = '''
ease_to = G.GAME.chips + (G.GAME.blind:eman_modify_chips(hand_chips, mult) or math.floor(hand_chips*mult)),
'''
match_indent = false
times = 1



[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "draw_card(G.deck,G.hand, i*100/hand_space,'up', true)"
position = "at"
payload = '''
if G.GAME.blind and G.GAME.blind:eman_should_draw_phantom() then
    eman_draw_phantom_card(i*100/hand_space,'up', true)
else
    draw_card(G.deck,G.hand, i*100/hand_space,'up', true)
end
'''
match_indent = true
times = 2



[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "if area == G.discard then"
position = "before"
payload = '''
if self == G.deck and card.edition and card.edition.baotc_phantom then
    card:start_dissolve()
    return false
end
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "common_events.lua"
pattern = "to:emplace(card, nil, stay_flipped)"
position = "before"
payload = '''
if to == G.deck and card and card.edition and card.edition.baotc_phantom then
    card:start_dissolve()
    return true
end
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "v.ability.played_this_ante = nil"
position = "after"
payload = '''
v.ability.discarded_this_ante = nil
v.ability.triggered_this_ante = nil
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.hand.highlighted[i].ability.discarded = true"
position = "after"
payload = '''
G.hand.highlighted[i].ability.discarded_this_ante = true
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.deck:shuffle('nr'..G.GAME.round_resets.ante)"
position = "after"
payload = '''
G.GAME.blind:eman_rig_shuffle('nr'..G.GAME.round_resets.ante)
'''
match_indent = true
times = 1