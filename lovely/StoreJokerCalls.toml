[manifest]
version = "1.0.0"
priority = 0

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
for _kk, vvv in ipairs(G.GAME.tags) do
    if vvv:apply_to_run({type = 'store_joker_modify', card = v}) then break end
end
'''
position = "after"
payload = '''
for _, present_joker in ipairs(G.jokers.cards) do
    present_joker:calculate_joker({
        eman_store_item = v
    })
end
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
for kk, vv in ipairs(G.GAME.tags) do
    if vv:apply_to_run({type = 'store_joker_modify', card = forced_tag}) then break end
end
'''
position = "after"
payload = '''
for _, present_joker in ipairs(G.jokers.cards) do
    present_joker:calculate_joker({
        eman_store_item = forced_tag
    })
end
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
for k, v in ipairs(G.GAME.tags) do
    if v:apply_to_run({type = 'store_joker_modify', card = card}) then break end
end
'''
position = "after"
payload = '''
for _, present_joker in ipairs(G.jokers.cards) do
    present_joker:calculate_joker({
        eman_store_item = card
    })
end
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "card:start_materialize({G.C.WHITE, G.C.WHITE}, nil, 1.5*G.SETTINGS.GAMESPEED)"
position = "before"
payload = '''
for _, present_joker in ipairs(G.jokers.cards) do
    present_joker:calculate_joker({
        eman_booster_item = card,
        eman_booster_pack = self
    })
end
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "_starting_pool, _pool_key = G.P_JOKER_RARITY_POOLS[rarity], 'Joker'..rarity..((not _legendary and _append) or '')"
position = "before"
payload = '''
if not _rarity and not _legendary then
    for _, present_joker in ipairs(G.jokers.cards) do
        local eman_rarity_eval = present_joker:calculate_joker({eman_modify_pool_rarity = {rarity = rarity, legendary = _legendary, append = _append}})

        if eman_rarity_eval and eman_rarity_eval.rarity then
            rarity = eman_rarity_eval.rarity
        end
    end

    if G.GAME.eman_force_eternal_forgotten or (G.GAME.used_vouchers.v_baotc_history and G.GAME.eman_pool_target == G.pack_cards and pseudorandom('history') > 0.83) then
        rarity = 'baotc_forgotten'
    end
end
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local _pool, _pool_key = get_current_pool(_type, _rarity, legendary, key_append)"
position = "before"
payload = '''
G.GAME.eman_pool_target = area
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local _pool, _pool_key = get_current_pool(_type, _rarity, legendary, key_append)"
position = "after"
payload = '''
G.GAME.eman_pool_target = nil
'''
match_indent = true
times = 1



[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.pack_choices = self.config.center.config.choose or 1"
position = "before"
payload = '''
if G.GAME.used_vouchers.v_baotc_library then
    G.GAME.pack_size = G.GAME.pack_size + 1
    self.ability.extra = self.ability.extra + 1
end
'''
match_indent = true
times = 1